// Mocks generated by Mockito 5.4.2 from annotations
// in prueba_finmarkets/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i13;
import 'dart:typed_data' as _i14;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:prueba_finmarkets/core/error/failure.dart' as _i7;
import 'package:prueba_finmarkets/features/currencies_list/data/data_sources/remote_data_source/asset_remote_data_source.dart'
    as _i9;
import 'package:prueba_finmarkets/features/currencies_list/data/data_sources/remote_data_source/icons_remote_data_source.dart'
    as _i11;
import 'package:prueba_finmarkets/features/currencies_list/data/models/asset_model.dart'
    as _i10;
import 'package:prueba_finmarkets/features/currencies_list/domain/entities/asset_entity.dart'
    as _i8;
import 'package:prueba_finmarkets/features/currencies_list/domain/repository/asset_repository.dart'
    as _i3;
import 'package:prueba_finmarkets/features/currencies_list/domain/repository/icons_repository.dart'
    as _i4;
import 'package:prueba_finmarkets/features/currencies_list/domain/usecases/get_all_assets_with_icons.dart'
    as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssetRepository_1 extends _i1.SmartFake
    implements _i3.AssetRepository {
  _FakeAssetRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIconsRepository_2 extends _i1.SmartFake
    implements _i4.IconsRepository {
  _FakeIconsRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AssetRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetRepository extends _i1.Mock implements _i3.AssetRepository {
  MockAssetRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.AssetEntity>>> getFilterAssets(
          List<String>? assetsIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilterAssets,
          [assetsIds],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.AssetEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.AssetEntity>>(
          this,
          Invocation.method(
            #getFilterAssets,
            [assetsIds],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.AssetEntity>>>);
}

/// A class which mocks [IconsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIconsRepository extends _i1.Mock implements _i4.IconsRepository {
  MockIconsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.AssetIcon>>> getAllIcons() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllIcons,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.AssetIcon>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.AssetIcon>>(
          this,
          Invocation.method(
            #getAllIcons,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.AssetIcon>>>);
}

/// A class which mocks [AssetRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetRemoteDataSource extends _i1.Mock
    implements _i9.AssetRemoteDataSource {
  MockAssetRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i10.AssetModel>> getFilterAssets(List<String>? assetsIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilterAssets,
          [assetsIds],
        ),
        returnValue:
            _i6.Future<List<_i10.AssetModel>>.value(<_i10.AssetModel>[]),
      ) as _i6.Future<List<_i10.AssetModel>>);
}

/// A class which mocks [IconsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIconsRemoteDataSource extends _i1.Mock
    implements _i11.IconsRemoteDataSource {
  MockIconsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i10.AssetIconModel>> getAllAssetIcons() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAssetIcons,
          [],
        ),
        returnValue: _i6.Future<List<_i10.AssetIconModel>>.value(
            <_i10.AssetIconModel>[]),
      ) as _i6.Future<List<_i10.AssetIconModel>>);
}

/// A class which mocks [GetAllAssetsWithIcons].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllAssetsWithIcons extends _i1.Mock
    implements _i12.GetAllAssetsWithIcons {
  MockGetAllAssetsWithIcons() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AssetRepository get assetRepository => (super.noSuchMethod(
        Invocation.getter(#assetRepository),
        returnValue: _FakeAssetRepository_1(
          this,
          Invocation.getter(#assetRepository),
        ),
      ) as _i3.AssetRepository);
  @override
  _i4.IconsRepository get iconsRepository => (super.noSuchMethod(
        Invocation.getter(#iconsRepository),
        returnValue: _FakeIconsRepository_2(
          this,
          Invocation.getter(#iconsRepository),
        ),
      ) as _i4.IconsRepository);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.AssetEntity>>> call(
          List<String>? assetsIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [assetsIds],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.AssetEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.AssetEntity>>(
          this,
          Invocation.method(
            #call,
            [assetsIds],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.AssetEntity>>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);
  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i6.Future<_i14.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
      ) as _i6.Future<_i14.Uint8List>);
  @override
  _i6.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
