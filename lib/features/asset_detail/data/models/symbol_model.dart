

import 'dart:convert';

import 'package:prueba_finmarkets/features/asset_detail/domain/entities/symbol_entity.dart';

class SymbolModel extends SymbolEntity {

  SymbolModel({
    String? symbolId,
    String? exchangeId,
    String? symbolType,
    String? assetIdBase,
    String? assetIdQuote,
    String? assetIdUnit,
    double? futureContractUnit,
    String? futureContractUnitAsset,
    DateTime? dataStart,
    DateTime? dataEnd,
    DateTime? dataQuoteStart,
    DateTime? dataQuoteEnd,
    DateTime? dataOrderbookStart,
    DateTime? dataOrderbookEnd,
    DateTime? dataTradeStart,
    DateTime? dataTradeEnd,
    double? volume1Hrs,
    double? volume1HrsUsd,
    double? volume1Day,
    double? volume1DayUsd,
    double? volume1Mth,
    double? volume1MthUsd,
    int? price,
    String? symbolIdExchange,
    String? assetIdBaseExchange,
    String? assetIdQuoteExchange,
    double? pricePrecision,
    double? sizePrecision,
}) : super(
    symbolId: symbolId,
    exchangeId: exchangeId,
    symbolType: symbolType,
    assetIdBase: assetIdBase,
    assetIdQuote: assetIdQuote,
    assetIdUnit: assetIdUnit,
    futureContractUnit: futureContractUnit,
    futureContractUnitAsset: futureContractUnitAsset,
    dataStart: dataStart,
    dataEnd: dataEnd,
    dataQuoteStart: dataQuoteStart,
    dataQuoteEnd: dataQuoteEnd,
    dataOrderbookStart: dataOrderbookStart,
    dataOrderbookEnd: dataOrderbookEnd,
    dataTradeStart: dataTradeStart,
    dataTradeEnd: dataTradeEnd,
    volume1Hrs: volume1Hrs,
    volume1HrsUsd: volume1HrsUsd,
    volume1Day: volume1Day,
    volume1DayUsd: volume1DayUsd,
    volume1Mth: volume1Mth,
    volume1MthUsd: volume1MthUsd,
    price: price,
    symbolIdExchange: symbolIdExchange,
    assetIdBaseExchange: assetIdBaseExchange,
    assetIdQuoteExchange: assetIdQuoteExchange,
    pricePrecision: pricePrecision,
    sizePrecision: sizePrecision,
  );

  factory SymbolModel.fromJson(String str) => SymbolModel.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory SymbolModel.fromMap(Map<String, dynamic> json) => SymbolModel(
    symbolId: json["symbol_id"],
    exchangeId: json["exchange_id"],
    symbolType: json["symbol_type"],
    assetIdBase: json["asset_id_base"],
    assetIdQuote: json["asset_id_quote"],
    assetIdUnit: json["asset_id_unit"],
    futureContractUnit: json["future_contract_unit"],
    futureContractUnitAsset: json["future_contract_unit_asset"],
    dataStart: json["data_start"] == null ? null : DateTime.parse(json["data_start"]),
    dataEnd: json["data_end"] == null ? null : DateTime.parse(json["data_end"]),
    dataQuoteStart: json["data_quote_start"] == null ? null : DateTime.parse(json["data_quote_start"]),
    dataQuoteEnd: json["data_quote_end"] == null ? null : DateTime.parse(json["data_quote_end"]),
    dataOrderbookStart: json["data_orderbook_start"] == null ? null : DateTime.parse(json["data_orderbook_start"]),
    dataOrderbookEnd: json["data_orderbook_end"] == null ? null : DateTime.parse(json["data_orderbook_end"]),
    dataTradeStart: json["data_trade_start"] == null ? null : DateTime.parse(json["data_trade_start"]),
    dataTradeEnd: json["data_trade_end"] == null ? null : DateTime.parse(json["data_trade_end"]),
    volume1Hrs: json["volume_1hrs"],
    volume1HrsUsd: json["volume_1hrs_usd"],
    volume1Day: json["volume_1day"],
    volume1DayUsd: json["volume_1day_usd"],
    volume1Mth: json["volume_1mth"],
    volume1MthUsd: json["volume_1mth_usd"],
    price: json["price"],
    symbolIdExchange: json["symbol_id_exchange"],
    assetIdBaseExchange: json["asset_id_base_exchange"],
    assetIdQuoteExchange: json["asset_id_quote_exchange"],
    pricePrecision: json["price_precision"]?.toDouble(),
    sizePrecision: json["size_precision"],
  );

  Map<String, dynamic> toMap() => {
    "symbol_id": symbolId,
    "exchange_id": exchangeId,
    "symbol_type": symbolType,
    "asset_id_base": assetIdBase,
    "asset_id_quote": assetIdQuote,
    "asset_id_unit": assetIdUnit,
    "future_contract_unit": futureContractUnit,
    "future_contract_unit_asset": futureContractUnitAsset,
    "data_start": "${dataStart!.year.toString().padLeft(4, '0')}-${dataStart!.month.toString().padLeft(2, '0')}-${dataStart!.day.toString().padLeft(2, '0')}",
    "data_end": "${dataEnd!.year.toString().padLeft(4, '0')}-${dataEnd!.month.toString().padLeft(2, '0')}-${dataEnd!.day.toString().padLeft(2, '0')}",
    "data_quote_start": dataQuoteStart?.toIso8601String(),
    "data_quote_end": dataQuoteEnd?.toIso8601String(),
    "data_orderbook_start": dataOrderbookStart?.toIso8601String(),
    "data_orderbook_end": dataOrderbookEnd?.toIso8601String(),
    "data_trade_start": dataTradeStart?.toIso8601String(),
    "data_trade_end": dataTradeEnd?.toIso8601String(),
    "volume_1hrs": volume1Hrs,
    "volume_1hrs_usd": volume1HrsUsd,
    "volume_1day": volume1Day,
    "volume_1day_usd": volume1DayUsd,
    "volume_1mth": volume1Mth,
    "volume_1mth_usd": volume1MthUsd,
    "price": price,
    "symbol_id_exchange": symbolIdExchange,
    "asset_id_base_exchange": assetIdBaseExchange,
    "asset_id_quote_exchange": assetIdQuoteExchange,
    "price_precision": pricePrecision,
    "size_precision": sizePrecision,
  };

  SymbolEntity toSymbolEntity() => SymbolEntity(
    symbolId: symbolId,
    exchangeId: exchangeId,
    symbolType: symbolType,
    assetIdBase: assetIdBase,
    assetIdQuote: assetIdQuote,
    assetIdUnit: assetIdUnit,
    futureContractUnit: futureContractUnit,
    futureContractUnitAsset: futureContractUnitAsset,
    dataStart: dataStart,
    dataEnd: dataEnd,
    dataQuoteStart: dataQuoteStart,
    dataQuoteEnd: dataQuoteEnd,
    dataOrderbookStart: dataOrderbookStart,
    dataOrderbookEnd: dataOrderbookEnd,
    dataTradeStart: dataTradeStart,
    dataTradeEnd: dataTradeEnd,
    volume1Hrs: volume1Hrs,
    volume1HrsUsd: volume1HrsUsd,
    volume1Day: volume1Day,
    volume1DayUsd: volume1DayUsd,
    volume1Mth: volume1Mth,
    volume1MthUsd: volume1MthUsd,
    price: price,
    symbolIdExchange: symbolIdExchange,
    assetIdBaseExchange: assetIdBaseExchange,
    assetIdQuoteExchange: assetIdQuoteExchange,
    pricePrecision: pricePrecision,
    sizePrecision: sizePrecision,
  );
}